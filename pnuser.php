<?php
// $Id: pnuser.php,v 1.2 2002/06/29 10:38:59 philip Exp $
// ----------------------------------------------------------------------
// FormExpress module for POST-NUKE Content Management System
// Copyright (C) 2002 by Stutchbury Limited
// http://www.stutchbury.net/
// ----------------------------------------------------------------------
// Based on:
// PHP-NUKE Web Portal System - http://phpnuke.org/
// Thatware - http://thatware.org/
// ----------------------------------------------------------------------
// LICENSE
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License (GPL)
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WIthOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// To read the license please visit http://www.gnu.org/copyleft/gpl.html
// ----------------------------------------------------------------------
// Original Author of file: Philip Fletcher
// Purpose of file:  FormExpress user display functions
// ----------------------------------------------------------------------

$ModName = basename( dirname( __FILE__ ) );

include_once( "modules/$ModName/pnclass/FXSession.php" );
include_once( "modules/$ModName/pnclass/FXCache.php" );
include_once( "modules/$ModName/pnclass/FXHtml.php" );

/**
 * the main user function
 * This function is the default function, and is called whenever the module is
 * initiated without defining arguments.  As such it can be used for a number
 * of things, but most commonly it either just shows the module menu and
 * returns or calls whatever the module designer feels should be the default
 * function (often this is the view() function)
 */
function FormExpress_user_main()
{
    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $output = new FXHtml();

    
    // Security check - important to do this as early as possible to avoid
    // potential security holes or just too much wasted processing.  For the
    // main function we want to check that the user has at least overview
    // privilege for some item within this component, or else they won't be
    // able to see anything and so we refuse access altogether.  The lowest
    // level of access for administration depends on the particular module, but
    // it is generally either 'overview' or 'read'
    if (!pnSecAuthAction(0, 'FormExpress::', '::', ACCESS_READ)) {
        $output->Text(_FORMEXPRESSNOAUTH);
        return $output->GetOutput();
    }

    // Add menu to output - it helps if all of the module pages have a standard
    // menu at their head to aid in navigation
    $default_form_id = pnModGetVar('FormExpress', 'default_form_id');
    if ( $default_form_id != '-1' ) {
        return ( pnModFunc ( 'FormExpress'
                           , 'user'
                           , 'display_form'
                           , array( 'form_id' => $default_form_id
			          , 'admin_mode' => false
                                  )
                           )
               );
    } else {
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->Text(FormExpress_usermenu());
        $output->SetInputMode(_PNH_PARSEINPUT);

        // Return the output that has been generated by this function
        return $output->GetOutput();
    }
}

/**
 * view items
 * This is a standard function to provide an overview of all of the items
 * available from the module.
 */
function FormExpress_user_view()
{
    // Get parameters from whatever input we need.  All arguments to this
    // function should be obtained from pnVarCleanFromInput(), getting them
    // from other places such as the environment is not allowed, as that makes
    // assumptions that will not hold in future versions of PostNuke

    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $output = new FXHtml();

    // Add menu to output - it helps if all of the module pages have a standard
    // menu at their head to aid in navigation
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(FormExpress_usermenu());
    $output->SetInputMode(_PNH_PARSEINPUT);

    // Security check - important to do this as early as possible to avoid
    // potential security holes or just too much wasted processing
    if (!pnSecAuthAction(0, 'FormExpresss::', '::', ACCESS_OVERVIEW)) {
        $output->Text(_FORMEXPRESSNOAUTH);
        return $output->GetOutput();
    }

    // Load API.  All of the actual work for obtaining information on the items
    // is done within the API, so we need to load that in before we can do
    // anything.  If the API fails to load an appropriate error message is
    // posted and the function returns
    if (!pnModAPILoad('FormExpress', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    }

    // The API function is called.  The arguments to the function are passed in
    // as their own arguments array
    $items = pnModAPIFunc( 'FormExpress'
                         , 'user'
                         , 'getall'
                         );

    // The return value of the function is checked here, and if the function
    // suceeded then an appropriate message is posted.  Note that if the
    // function did not succeed then the API function should have already
    // posted a failure message so no action is required
    if ($items == false) {
        $output->Text(_FORMEXPRESSFORMFAILED);
    }

    // Loop through each item and display it.  Note the use of pnVarCensor() to
    // remove any words from the name that the administrator has deemed
    // unsuitable for the site
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableStart( ''
                       , array( _FORMEXPRESSNAME
                              , _FORMEXPRESSDESCRIPTION
                              )
                       , 0
                       );
    foreach ($items as $item) {
                //$row[] = $item['form_name'];
                //$row[] = $item['description'];
        
        $row = array();
        if (pnSecAuthAction(0,
                            'FormExpresss::',
                            "$item[form_name]::$item[form_id]",
                            ACCESS_READ)) {
            //$output->URL(pnModURL('FormExpress',
            $output->SetOutputMode(_PNH_RETURNOUTPUT);
            $row[] = $output->URL(pnModURL('FormExpress',
                                  'user',
                                  'display',
                                  array('form_id' => $item['form_id'])),
                         pnVarPrepForDisplay(pnVarCensor($item['form_name'])));
            $row[] = $item['description'];
            $output->SetOutputMode(_PNH_KEEPOUTPUT);
            $output->TableAddRow($row, 'left', 'top');
            //$output->Linebreak();
        }
    }
    $output->TableEnd();
    $output->SetInputMode(_PNH_PARSEINPUT);

    // Return the output that has been generated by this function
    return $output->GetOutput();
}

/**
 * display item
 * This is a standard function to provide detailed informtion on a single item
 * available from the module.
 */
function FormExpress_user_display($args)
{
    // Get parameters from whatever input we need.  All arguments to this
    // function should be obtained from pnVarCleanFromInput(), getting them
    // from other places such as the environment is not allowed, as that makes
    // assumptions that will not hold in future versions of PostNuke.
    list($form_id,
         $objectid) = pnVarCleanFromInput('form_id',
                                          'objectid');

    // At this stage we check to see if we have been passed $objectid, the
    // generic item identifier.  This could have been passed in by a hook or
    // through some other function calling this as part of a larger module, but
    // if it exists it overrides $tid
    //
    // Note that this module couuld just use $objectid everywhere to avoid all
    // of this munging of variables, but then the resultant code is less
    // descriptive, especially where multiple objects are being used.  The
    // decision of which of these ways to go is up to the module developer
    if (!empty($objectid)) {
        $form_id = $objectid;
    }

    // User functions of this type can be called by other modules.  If this
    // happens then the calling module will be able to pass in arguments to
    // this function through the $args parameter.  Hence we extract these
    // arguments *after* we have obtained any form-based input through
    // pnVarCleanFromInput().
    extract($args);

    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $output = new FXHtml();

    // Add menu to output - it helps if all of the module pages have a standard
    // menu at their head to aid in navigation
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(FormExpress_usermenu());
    $output->SetInputMode(_PNH_PARSEINPUT);

    $output->Title($form['form_name']);

    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(FormExpress_user_display_form(array( 'form_id' => $form_id)));
    $output->SetInputMode(_PNH_PARSEINPUT);

    // Let any hooks know that we are displaying an item.  As this is a display
    // hook we're passing a URL as the extra info, which is the URL that any
    // hooks will show after they have finished their own work.  It is normal
    // for that URL to bring the user back to this function
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(pnModCallHooks('item',
                                 'display',
                                 $form_id,
                                 pnModURL('FormExpress',
                                          'user',
                                          'display',
                                          array('form_id' => $form_id))));
    $output->SetInputMode(_PNH_PARSEINPUT);

    // Return the output that has been generated by this function
    return $output->GetOutput();
}

/**
 * display the form without any menu/header/footer etc.
 */
function FormExpress_user_display_form($args) {
//Start of object display
    // Get parameters from whatever input we need.  All arguments to this
    // function should be obtained from pnVarCleanFromInput(), getting them
    // from other places such as the environment is not allowed, as that makes
    // assumptions that will not hold in future versions of PostNuke.
    list( $form_id
        , $objectid) = pnVarCleanFromInput( 'form_id'
                                          , 'objectid'
                                          );

    // At this stage we check to see if we have been passed $objectid, the
    // generic item identifier.  This could have been passed in by a hook or
    // through some other function calling this as part of a larger module, but
    // if it exists it overrides $tid
    //
    // Note that this module couuld just use $objectid everywhere to avoid all
    // of this munging of variables, but then the resultant code is less
    // descriptive, especially where multiple objects are being used.  The
    // decision of which of these ways to go is up to the module developer
    if (!empty($objectid)) {
        $form_id = $objectid;
    }

    // User functions of this type can be called by other modules.  If this
    // happens then the calling module will be able to pass in arguments to
    // this function through the $args parameter.  Hence we extract these
    // arguments *after* we have obtained any form-based input through
    // pnVarCleanFromInput().
    extract($args);

    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $output = new FXHtml();

    // Load API.  All of the actual work for obtaining information on the items
    // is done within the API, so we need to load that in before we can do
    // anything.  If the API fails to load an appropriate error message is
    // posted and the function returns
    if (!pnModAPILoad('FormExpress', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    }

    //Check for permissions
    if ( (!pnSecAuthAction(0, 'FormExpress::', "$form_id::", ACCESS_READ))) {
        $output->Text(_FORMEXPRESSNOAUTH);
        return $output->GetOutput();
    }

    $form = array();

    //Get the form from the cache
    $fxCache = new FXCache();
    $form = $fxCache->getForm($form_id);

    $fxSession = new FXSession();
    //if ( !($admin_mode) ) {
        $form['user_data'] = $fxSession->getForm($form_id);
    //}

    //Display the form
    //$output->Title($form['form_name']);

    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(pnGetStatusMsg());
    $output->SetInputMode(_PNH_PARSEINPUT);
    //$output->Linebreak(2);

    //The form action always goes to 'submit_form' function
    $output->FormStart(pnModURL( 'FormExpress'
                               , 'user'
                               , 'submit_form'
                               , array( 'form_id' => $form_id
                                      )
                               )
                      );
    //For testing/debug only
    //$output->SetInputMode(_PNH_VERBATIMINPUT);
    //$output->Text('<form action="'.pnModURL( 'FormExpress'
    //                           , 'user'
    //                           , 'submit_form'
    //                           , array( 'form_id' => $form_id
    //                                  )
    //                           )
    //                        .'" method="get">'
    //                  );


    // Add an authorisation ID - this adds a hidden field in the form that
    // contains an authorisation ID.  The authorisation ID is very important in
    // preventing certain attacks on the website
    $output->FormHidden('authid', pnSecGenAuthKey('FormExpress'));

    $output->SetInputMode(_PNH_VERBATIMINPUT);
    //Create the table
    $output->TableStart('','', (($table_border) ? $table_border : 0));
    $first_item = true;
    $required_fields = false;
    $is_fieldset = array();

    if ( ( is_array($form['items']) ) && ( count($form['items']) > 0 ) ) { //Just in case there are no items
        foreach ($form['items'] as $item) {

            //Here we add the weight range array to the items array (if it has been passed)
            //a bit wasteful to have it on each item, but saves a sql fetch for each row
            if (isset($item_weight_range)) {
                $item['weight_range'] = $item_weight_range;
            }
            //Ditto for table_border
            if (isset($table_border)) {
                $item['table_border'] = $table_border;
            }

            $item['suffix'] = $form['input_name_suffix'];

            $item['user_data'] = $form['user_data'][$item['item_name']];

            //Set first item to be below
            if ( ($first_item)) { 
                $item['relative_position'] = 'below'; 
            }

            switch ($item['relative_position']) {

                case 'inline':
                    //$output->Text(FormExpress_user_show_item($item));
                break;
                case 'right':
                    $output->TableColEnd();//OK
                    $output->TableColStart('1', 'left', 'top');
                    //$output->Text(FormExpress_user_show_item($item));
                break;
                default: //case 'below':
                    //Close col+row, unless first item (We never close an input item incase of 'inline')
                    if ( ($first_item) ) {
                        $first_item = false;
		    } else {
			$output->TableColEnd();
                        $output->TableRowEnd();
                    }
                    if ( ($item['item_type'] != 'groupend') ) {
                        $output->TableRowStart('left', 'top');
                        if ( ($item['prompt_position'] != 'leftcol')
                           ) {
                            $output->TableColStart('2', 'left', 'top');
                        } else {
                            $output->Text('<td colspan="1" align="left" valign="top" width="25%">' );
                        }
                    } else {
                        $item['is_fieldset'] = $is_fieldset[$group_level];
                    }
                    //$output->Text(FormExpress_user_show_item($item));
                break;
            }
            switch($item['item_type']) {
                case 'groupstart':
		    array_push($is_fieldset, !empty($item['item_value']));
		    $first_item = true; //First item in a new table
                break;
                case 'groupend':
                    $item['is_fieldset'] = array_pop($is_fieldset);
                break;
            }
            if ( $item['required'] ) { $required_fields = true; }
	    $output->Text(FormExpress_user_show_item($item));
        }
    } else {
        $output->TableRowStart();
        $output->TableColStart();
	$output->Text(_FORMEXPRESSNOITEMSFOUND);
    }

    //Cleanup any groups left open
    while ( count($is_fieldset) > 0 ) {
        //groupend
	$output->TableColEnd();
        $output->TableRowEnd();
	$output->Text('</table');
        $output->Text((array_pop($is_fieldset)) ? '</fieldset>' : '');
    }
    //End of the outermost table
    $output->TableColEnd();
    $output->TableRowEnd();
    $output->TableEnd();

    $output->FormEnd();
    if ( $required_fields) { $output->Text(_FORMEXPRESSREQUIREDFIELD); }
    //End display object
    //Note, we don't do hooks here - just the object display.

    // Return the output that has been generated by this function
    return $output->GetOutput();
}


/**
 * generate menu fragment
 */
function FormExpress_usermenu()
{
    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $output = new FXHtml();

    // Display status message if any.  Note that in future this functionality
    // will probably be in the theme rather than in this menu, but this is the
    // best place to keep it for now

    // Start options menu
    $output->Text(pnGetStatusMsg());
    $output->Linebreak(2);

    // Menu options.  These options are all added in a single row, to add
    // multiple rows of options the code below would just be repeated
    $output->TableStart(_FORMEXPRESS);
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $columns = array();
    $columns[] = $output->URL(pnModURL('FormExpress',
                                       'user',
                                       'view'),
                              _FORMEXPRESSVIEW);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddRow($columns);
    $output->SetInputMode(_PNH_PARSEINPUT);
    $output->TableEnd();

    // Return the output that has been generated by this function
    return $output->GetOutput();
}
function FormExpress_user_get_item_options($item) {
    if ( (!pnSecAuthAction(0, 'FormExpress::', '::', ACCESS_EDIT))
       ||(!function_exists('formexpress_admin_get_item_options'))
       ) {
        return;
    } else {
        //Get min/max weight values
        //$item_weight_range = FormExpress_adminapi_get_item_weight_range( $item['form_id'] );

        $output = new FXHtml();
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        switch($item['item_type']) {
            case 'groupstart':
                $output->Text('<small>'._FORMEXPRESSITEMTYPELOVGROUPSTART.': '.FormExpress_admin_get_item_options($item, $item['weight_range']).'</small><br>');
            break;
    
            case 'groupend':
                $output->Text('<small>'._FORMEXPRESSITEMTYPELOVGROUPEND.': '.FormExpress_admin_get_item_options($item, $item['weight_range']).'</small>');
            break;
    
            case 'hidden':
                $output->Text('<small>'._FORMEXPRESSITEMTYPELOVHIDDEN.': '.FormExpress_admin_get_item_options($item, $item['weight_range']).'</small>');
            break;
    
            default:
                $output->Text(' <small>'.FormExpress_admin_get_item_options($item, $item['weight_range']).'</small>');
            break;
        }
        return $output->GetOutput();
    }
}

/**
 * Return formated <label> element for an item's prompt.
 * @param item definition (array)
 * @return formatted output
 */
function FormExpress_user_show_prompt($item) {

    $output = new FXHtml();
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    switch($item['item_type']) {
        case 'text':
        case 'password':
        case 'textarea':
        case 'submit':
        case 'reset':
        case 'button':
        case 'checkbox':
        case 'selectlist':
            if ( $item['prompt'] ) {
                $output->Text('<label for="'.$item['item_name'].$item['suffix'].'">'.$item['prompt'].'</label>');
            }
        break;
        case 'radio':
            if ( $item['prompt'] ) {
                $output->Text('<label for="'.$item['item_name'].$item['suffix'].$item['item_value'].'">'.$item['prompt'].'</label>');
            }
        break;
    }
    return $output->GetOutput();
}

/**
 * Return the formatted item, correctly positioning prompt and input.
 * @param item definition (array)
 * @return formatted output
 */
function FormExpress_user_show_item($item) {
    $output = new FXHtml();
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    if (($item['prompt'])&&($item['required'])) {
        $item['prompt'] = $item['prompt'].'*';
    }
    switch($item['prompt_position']){
        case 'leftcol':
            $output->Text( FormExpress_user_show_prompt($item)
                         . '</td>'
                         . '<td>'
                         . FormExpress_user_show_input($item)
                         );
        break;
        case 'above':
            $output->Text(FormExpress_user_show_prompt($item).'<br/>'.FormExpress_user_show_input($item));
        break;
        case 'below':
            $output->Text(FormExpress_user_show_input($item).'<br/>'.FormExpress_user_show_prompt($item));
        break;
        case 'right':
            $output->Text(FormExpress_user_show_input($item).' '.FormExpress_user_show_prompt($item));
        break;
        case 'hidden':
            $output->Text(FormExpress_user_show_input($item));
        break;
        default: //case 'left':
            $output->Text(FormExpress_user_show_prompt($item).' '.FormExpress_user_show_input($item));
        break;
    }
    //Admin options
    $output->Text(FormExpress_user_get_item_options($item));

    // Return the output that has been generated by this function
    //$output->SetOutputMode(_PNH_RETURNOUTPUT);
    return $output->GetOutput();
}

/**
 * Return formatted input element.
 * @param item definition (array)
 * @return formatted output
 */
function FormExpress_user_show_input($item) {

    //Get the default_value
    if ($item['default_value']) {
        $default_value = FormExpress_parseandexecute($item['default_value']);
    }

    $output = new FXHtml();
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    switch($item['item_type']) {

    case 'boilerplate':
        //$output->Text('BOILERPLATE');
        $output->Text($item['item_value']);
        break;
    case 'checkbox':
        //$output->Text('CHECKBOX');
        $output->FormCheckbox( $item['item_name'].$item['suffix']
                             , ((isset($item['user_data'])) ? $item['user_data'] 
                                                            : $item['default_value']) ? true 
                                                                                      : false
                             , $item['item_value']
                             , 'checkbox'
                             , ''
                             , $item['item_attributes']
                             );
        break;
    case 'radio':
        //$output->Text('RADIO');
        $output->FormCheckbox( $item['item_name'].$item['suffix']
                             , (((isset($item['user_data'])) ? $item['user_data'] 
                                                             : $item['default_value']) 
                                    === $item['item_value']) ? true : false
                             , $item['item_value']
                             , 'radio'
                             , ''
                             , $item['item_attributes']
                             );
        break;
    case 'selectlist':
        //$output->Text('SELECTLIST');
        //Create data array
        $listvals = array();
        $lov = explode(',', $item['item_value']);
        foreach($lov as $vals) {
            $valsarr = explode('=', $vals);
            $listvals[] = array('id' => trim($valsarr[0])
                               , 'name' => (trim($valsarr[1])) ? trim($valsarr[1]) 
                                                               : trim($valsarr[0])
                               );
        }
        $output->FormSelectMultiple( $item['item_name'].$item['suffix']
                                   , $listvals
                                   , $item['multiple']
                                   , $item['rows']
                                   , (isset($item['user_data'])) ? $item['user_data'] 
                                                                 : $item['default_value'] 
                                   , ''
                                   , $item['item_attributes']
                                   );
        break;
    case 'text':
        //$output->Text('TEXT');
        $output->FormText( $item['item_name'].$item['suffix']
                         //, (isset($item['user_data'])) ? $item['user_data'] : $item['default_value'] 
                         , (isset($item['user_data'])) ? $item['user_data'] : $default_value 
                         , $item['cols']
                         , $item['max_length']
                         , false
                         , ''
                         , $item['item_attributes']
                         );
        break;
    case 'password':
        //$output->Text('PASSWORD');
        $output->FormText( $item['item_name'].$item['suffix']
                         , ''
                         , $item['cols']
                         , $item['max_length']
                         , true
                         , ''
                         , $item['item_attributes']
                         );
        break;
    case 'textarea':
        //$output->Text('TEXTAREA');
        $output->FormTextArea( $item['item_name'].$item['suffix']
                             , (isset($item['user_data'])) ? $item['user_data'] : $item['default_value'] 
                             , $item['rows']
                             , $item['cols']
                             //, $item['max_length']
                             , ''
                             , ''
                             , $item['item_attributes']
                             );
        break;
    case 'submit':
        //$output->Text('SUBMIT');
        $output->FormSubmit( pnVarPrepForDisplay($item['item_name']).$item['suffix']
                           , 'submit'
                           , pnVarPrepForDisplay($item['item_value'])
                           , 'top'
                           , ''
                           , $item['item_attributes']
                           );
        break;
    case 'reset':
        //$output->Text('RESET');
        $output->FormSubmit( pnVarPrepForDisplay($item['item_name']).$item['suffix']
                           , 'reset'
                           , pnVarPrepForDisplay($item['item_value'])
                           , 'top'
                           , ''
                           , $item['item_attributes']
                           );
        break;
    case 'button':
        //$output->Text('BUTTON');
	$output->Text('<button name="' . pnVarPrepForDisplay($item['item_name']).$item['suffix'] 
	             . '" value="' . pnVarPrepForDisplay($item['item_value'])
		     . '" type="' . pnVarPrepForDisplay($item['default_value'])
	             . '" '
		     . $item['item_attributes']
		     . '>'
	             . pnVarPrepForDisplay($item['item_value'])
	             .'</button>'
		     );
    case 'hidden':
        //$output->Text('HIDDEN');
        $output->FormHidden( $item['item_name'].$item['suffix']
                           , $item['item_value']
                           );
        break;
    case 'groupstart':
        //$output->Text('GROUPSTART');
        if ($item['item_value']) {
            $output->Text('<fieldset '.$item['item_attributes'].'><legend>'.$item['item_value'].'<br></legend>');
        }
        $output->Text('<table border="'
                     .( ($item['table_border']) ? $item['table_border'] : 0) 
                     . '" cellpadding="2" cellspacing="0" width="100%">'
                     );
        break;
    case 'groupend':
	$output->Text('</table>');
        $output->Text(($item['is_fieldset']) ? '</fieldset>' : '');
        break;
    }
    return $output->GetOutput();
}

/** *****************************************************************************
 * This function is called for _every_ (user) form submit
 * It manages the session vars and calls to other functions.
 */
function FormExpress_user_submit_form() {

    $output = new FXHtml();

    // Confirm authorisation code.  This checks that the form had a valid
    // authorisation code attached to it.  If it did not then the function will
    // proceed no further as it is possible that this is an attempt at sending
    // in false data to the system
    if (!pnSecConfirmAuthKey()) {
        $output->Text(_BADAUTHKEY);
        $output->LineBreak(2);
        $output->URL(pnModURL('FormExpress', 'user', 'view'),_FORMEXPRESSVIEW);
        return $output->GetOutput();
    }

    $form_id = pnVarCleanFromInput('form_id');

    //// Get all the form, item and input data ////

    // Load API.  All of the actual work for obtaining information on the items
    // is done within the API, so we need to load that in before we can do
    // anything.  If the API fails to load an appropriate error message is
    // posted and the function returns
    if (!pnModAPILoad('FormExpress', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    }

    //Get the form from the cache
    $fxCache = new FXCache();
    $form = $fxCache->getForm($form_id);

    $missing_value_list = false;
    $validation_result_list = false;

    //An array to hold the form results
    $user_data = array();
    //Load the array
    foreach($form['items'] AS $item) {
        if ( !ereg('boilerplate|groupstart|groupend|reset', $item['item_type'])) {
            //Get the input name
            $input_name = $item['item_name'].$form['input_name_suffix'];
            //!TODO Need to do something for SelectMultple when 
            //pnVarCleanFromInput supports it...
            //$form['items'][$item['form_item_id']]['user_data'] = pnVarCleanFromInput($input_name);
            $user_data[$item['item_name']] = pnVarCleanFromInput($input_name);
            //$user_data[$item['item_name']] = pnVarCleanFromInput(&$input_name);
            //Check the required fields
            if ( ($item['required'])
               //&&(empty($form['items'][$item['form_item_id']]['user_data']))
               &&(trim($user_data[$item['item_name']]) == '')
               ) {
                $missing_value_list = $missing_value_list
                                      .(($missing_value_list)?', ':'')
                                      .$item['prompt']
                                      ._FORMEXPRESSVALUEREQUIRED;
            }
            //Do other validation (function calls and regexp)
            //Note this is reverse logic - if the call returns anything other 
            //void or false then validation is deemed to have failed
            //TODO! revisit this when pnException is available
            if ( ( $item['validation_rule'] ) 
               &&($validation_result 
                   = FormExpress_parseandexecute( $item['validation_rule']
                                                , $user_data[$item['item_name']]
                                                )
                 )
               ) {
                $validation_result_list = $validation_result_list
                                          .(($validation_result_list)?', ':'')
                                          .$item['prompt']
                                          .$validation_result;
            }
            //
        }
    }

    //We now have all the data, so create the session vars
    //Moving towards using session vars to store data
    //This will enable multiple forms
    $fxSession = new FXSession();
    $fxSession->setForm($form_id, $user_data, true);


    //Check there are no missing required values
    if ($missing_value_list||$validation_result_list) {
        $output->SetInputMode(_PNVERBATIMINPUT);
        pnSessionSetVar('errormsg', _FORMEXPRESSVALIDATIONFAILED.$missing_value_list.$validation_result_list);
        $output->Text(pnModFunc('FormExpress'
                              , 'user'
                              , 'display_form'
                              , array('form_id' => $form_id
                                     //, 'user_data' => $user_data //Will use session data
                                     )
                              )
                     );
        return $output->GetOutput();
    }

    //Call the submit_action
    $submit_result = FormExpress_parseandexecute($form['submit_action'], false);
    // Check for parse or execution error
    if ( ( strpos($submit_result, _FORMEXPRESSFUNCPARSEERROR) === 0 )
       ||( strpos($submit_result, _FORMEXPRESSFUNCVOIDRESULT) === 0 )
       ) {
        //Note we don't use failure message for parse or void return errors.
        $output->SetInputMode(_PNVERBATIMINPUT);
        $output->Text($submit_result);
        return $output->GetOutput();
    }

    //Note that if the submit action returns true or false then we call
    // success or failure, otherwise return the output stream

    //Check for submit result
    if ( $submit_result === true ) {
        $success_result = FormExpress_parseandexecute($form['success_action'], false);
        $output->SetInputMode(_PNVERBATIMINPUT);
        $output->Text($success_result);
        return $output->GetOutput();
    } elseif ( $submit_result === false ) {
        $failure_result = FormExpress_parseandexecute($form['failure_action'], false);
        $output->SetInputMode(_PNVERBATIMINPUT);
        $output->Text($failure_result);
        return $output->GetOutput();
    } else {
        $output->SetInputMode(_PNVERBATIMINPUT);
        $output->Text($submit_result);
        return $output->GetOutput();
    }

}

/** *****************************************************************************
 * This function creates an anonymous (lambda-style) function and
 * then runs it.
 * Returns: the value of the anonymous function
 *      or  a parse error message
 *      or  VOID if the parse was successful but the call to sub functions failed.
 *
 * @param action        The text to parse (and therefore action to execute)
 * @param fx_value      A value passed from the FormExpress call.  These are:
 *                        For ereg/preg_match: the value to be checked
 *                        For pnModFunc call: the form_id (?)
 * @param check_config Check FormExpress config to see if execute allowed. 
 *                     (not yet implemented)
 *                   
 */
function FormExpress_parseandexecute($action, $fx_value='', $check_config=true) {
    //First check if there are '{}' at each end
    //if ( !ereg("(^[[:space:]]*[\{]+).+([\}]+[[:space:]]*$)", $action ) ) {
    // Check if action starts with '{'
    if ( !ereg("(^[[:space:]]*[\{]+).+([[:space:]]*$)", $action ) ) {
        return $action;
    } elseif ( strpos(ereg_replace("([[:space:]])", "", $action), 'ereg') === 1 ) {
        //Next check for ereg
        $validation_failed = ereg_replace( "}+[[:space:]]*$", "", substr($action, strrpos($action, '&')+1));
        $action = substr(substr($action, 0, strrpos($action, '&')-1), strpos($action, ':')+1);
        $func_text = "((ereg('".$action."', '".$fx_value."'))?false:'".$validation_failed."')";
    } elseif ( strpos(ereg_replace("([[:space:]])", "", $action), 'preg') === 1 ) {
        //Then check for preg
        $validation_failed = ereg_replace( "}+[[:space:]]*$", "", substr($action, strrpos($action, '&')+1));
        $action = substr(substr($action, 0, strrpos($action, '&')-1), strpos($action, ':')+1);
        $func_text = "((preg_match('".$action."', '".$fx_value."'))?false:'".$validation_failed."')";
    } else {
        //Must be calling a function
        $func_text = '';
        $modstoload = array();
        //while ( $chr = substr($action, 0, 1)) {
        while ( strlen($action) ) {
            $chr = substr($action, 0, 1);
            if ( ($prev_chr == "'") && ($chr != "'") ) {
                //Ignore every thing between quotes
                $func_text .= $chr;
                $action = substr($action, 1);
            } else {
                switch ($chr) {
                    case "'":
                        $func_text .= $chr;
                        //Set/unset prev_chr
                        $action = substr($action, 1);
                        $prev_chr = (($prev_chr == "'")? '' : "'");
                    break;
                    case '{':
                        //$func_text = rtrim($func_text)."pnModAPIFunc('";
                        $func_text = rtrim($func_text)."pnModFunc('";
                        $action = ltrim(substr($action, 1));
                        $prev_chr = $chr;
                    break;
                    case ':':
                        $func_text = rtrim($func_text)."' , 'user', '";
                        $action = ltrim(substr($action, 1));
                        $prev_chr = $chr;
                        $modstoload[] = $modtoload;
                        $modtoload = '';
                    break;
                    case '&':
                        //If any parameters are passed, then we also pass fx_action
                        //Don't want to pass it if no args 'cos function may fail
                        $func_text = rtrim($func_text)
                                    .(($prev_chr == ':') 
                                       ? "' , array ( 'fx_value'=>'".$fx_value."', '" 
                                       : " , '"
                                     );
                        $action = ltrim(substr($action, 1));
                        $prev_chr = $chr;
                    break;
                    case '=':
                        $func_text = rtrim($func_text)."' => ";
                        $action = ltrim(substr($action, 1));
                        $prev_chr = $chr;
                    break;
                    case '}':
                        if ( $prev_chr == ':' ) {
                            $func_text = rtrim($func_text) . "' )";
                        } elseif ( $prev_chr == '{' ) {
                            $func_text = rtrim($func_text) . "' )";
                            $modstoload[] = $modtoload;
                            $modtoload = '';
                        } else {
                            $func_text = rtrim($func_text)."))";
                        }
                        $action = ltrim(substr($action, 1));
                        $prev_chr = $chr;
                    break;
                    default:
                        $func_text .= $chr;
                        $action = substr($action, 1);
                        //Don't set prev_char
                        //Might as well build the module list here too...
                        if ( $prev_chr == '{' ) {
                           $modtoload .= $chr;
                        }
                    break;
                }
            }
        }

        //If no mods to load, then return 'cos something's not right
        if (count($modstoload) < 1) {
            return $action;
        }

        $modstoload = array_unique($modstoload);


        foreach ($modstoload as $mod) {
           //Don't need to worry about multiple loads as there is a 
           //check in pnModAPILoad()
           if (!pnModLoad($mod, 'user')) {
               $output = new FXHtml();
               $output->Text(_LOADFAILED .'('.$mod.')');
               return $output->GetOutput();
           }
        }
    }

    //Add 'return' and ';' to function
    $func_text = 'return '.$func_text.';';

    //Create the function - don't display parse errors.
    $func = @create_function('', $func_text);

    if (empty($func)) {
        //There must have been a parse error...
        //Implement exception handling when available
        return (_FORMEXPRESSFUNCPARSEERROR . $action );
    } else {
        //Call the function
        $func_result = $func();
        if ( empty($func_result) && !($func_result === false) ) {
           //This means the function parsed OK but the call to
           //the function did not return a value (true, false or any value)
           //Implement exception handling when available
           return ( _FORMEXPRESSFUNCVOIDRESULT . $action );
        } else {
            return $func_result;
        }
    }
}

function FormExpress_user_configGetVar($args) {
    extract($args);
    return pnConfigGetVar($name);
}

function FormExpress_user_userGetVar($args) {
    extract($args);
    $result = pnUserGetVar($name);
    if ($result) {
        return $result;
    } else {
        return false;
    }
}

function FormExpress_user_showPage($args) {
    extract($args);
    if (!$page_url) {
        return _MODARGSERROR;
    }
    return pnRedirect($page_url);
}


/** *****************************************************************************
 * Sample implementation of a Formexpress backend (experimental)
 */
function FormExpress_user_sendmail($args) {
    extract($args);

    if (!isset($email_address) || empty($email_address) ) {
        pnSessionSetVar('errormsg', _FORMEXPRESSEMAILADDRERROR);
        return false;
    }

    $fxSession = new FXSession();
    $form_id = $fxSession->getSubmittedFormID();
    $user_data = $fxSession->getForm($form_id);

    $fxCache = new FXCache();
    $form = $fxCache->getForm($form_id);

    //Do any custom validation
    //if (!1==2) {
    //    pnSessionSetVar('errormsg', _FORMEXPRESSCUSTOMVALIDATIONERROR);
    //    return false; //_FORMEXPRESSCUSTOMVALIDATIONERROR;
    //}


    $message_id = time();

    $adminmail = pnConfigGetVar('adminmail');
    $message = _FORMEXPRESSEMAILHEADER."\n\n";
    $message .= _FORMEXPRESSEMAILID."$message_id\n\n";
    $dup_list = array();
    $replymail;
    foreach($form['items'] AS $item) {
        //TODO! Tidy up ifs
        if ( !ereg('boilerplate|groupstart|groupend|reset', $item['item_type'])) {
            //TODO! Need to add some logic for multiple selects (when supported)
            if (!in_array($item['item_name'], $dup_list) && $user_data[$item['item_name']] ) {
                $message = $message.$item['item_name'].' = '.$user_data[$item['item_name']]." \n\n";
                $dup_list[] = $item['item_name'];
            }
            if ( $item['item_name']  == 'replyto_email' ) {
                $replymail = $user_data[$item['item_name']];
            }
        }
    }
    $message = $message."\n\n"._FORMEXPRESSEMAILFOOTER;
    //Cannot use pnMail, because it does not return true or false...
    if (   mail( $email_address
               , $message_id.': '.$form['form_name']
               , $message
               //, "From: $adminmail\r\nReply-to: \r\n"
               , "From: ".$adminmail."\r\nReply-to: ".($replymail ? $replymail : $adminmail)."\r\n"
               )
       ) {
        pnSessionSetVar('FORMEXPRESSSUBMITID',  $message_id);
        //Clear the user session data
        $fxSession->delForm($form_id);
        return true;
    } else {
        pnSessionSetVar('errormsg', _FORMEXPRESSEMAILSENDERROR);
        //return _FORMEXPRESSEMAILSENDERROR;
        return false;
    }
}

function FormExpress_user_display_message($args) {
   extract($args);
   $submit_id =  pnSessionGetVar('FORMEXPRESSSUBMITID');
   pnSessionDelVar('FORMEXPRESSSUBMITID');
   $output = new FXHtml();
   $output->SetInputMode(_PNVERBATIMINPUT);
   $output->Text($message . ' ' . $submit_id);
   return $output->GetOutput();
}
function FormExpress_user_navigate($args) {
    extract($args);

    //Get the current form details from session

    //If the 'submitprevious' is set, then go to prev form (if there is one)

    //else if the 'FXNextForm is specified, then  use this
    //     else use 'formname' from args

    //Get the form details and display

    $output = new FXHtml();
    $output->Text('This is the next form');
    return $output->GetOutput();
}

?>
